input addAddressInput {
  user_id: String!
  province: String!
  city: String!
  block: String!
  detailAddress: String!
  name: String!
  phoneNumber: String!
  zipCode: String!
  isDefault: String!
  clientMutationId: String
}

type addAddressPayload {
  addresses: AddressTypeConnection
  clientMutationId: String
}

input addNewsInput {
  time: String!
  title: String!
  laohe: String!
  clientMutationId: String
}

type addNewsPayload {
  clientMutationId: String
}

input addPurchaseOrderInput {
  userId: String!
  addressId: String!
  commodityId: String!
  totalPrice: String!
  amount: String!
  isPay: String!
  clientMutationId: String
}

type addPurchaseOrderPayload {
  purchaseOrders: PurchaseOrderTypeConnection
  clientMutationId: String
}

"""Address信息"""
type AddressType {
  """The ID of an object"""
  id: ID!
  province: String
  city: String
  block: String
  detailAddress: String
  user_id: String
  name: String
  phoneNumber: String
  zipCode: String
  isDefault: String
}

"""A connection to a list of items."""
type AddressTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AddressTypeEdge]
}

"""An edge in a connection."""
type AddressTypeEdge {
  """The item at the end of the edge"""
  node: AddressType

  """A cursor for use in pagination"""
  cursor: String!
}

input addSCCInput {
  commodityId: String!
  amount: String!
  clientMutationId: String
}

type addSCCPayload {
  clientMutationId: String
}

"""Commodity信息"""
type CommodityType {
  """The ID of an object"""
  id: ID!
  name: String
  price: Float
  image: String
  desc: String
  category: String
  amount: String
}

"""A connection to a list of items."""
type CommodityTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CommodityTypeEdge]
}

"""An edge in a connection."""
type CommodityTypeEdge {
  """The item at the end of the edge"""
  node: CommodityType

  """A cursor for use in pagination"""
  cursor: String!
}

input createTokenInput {
  nickName: String
  phoneNumber: String
  password: String!
  clientMutationId: String
}

type createTokenPayload {
  error: String
  user: UserType
  clientMutationId: String
}

input createUserInput {
  nickName: String!
  password: String!
  phoneNumber: String!
  sex: String!
  birthday: String!
  clientMutationId: String
}

type createUserPayload {
  error: String
  user: UserType
  clientMutationId: String
}

input deleteAddressInput {
  address_id: String!
  clientMutationId: String
}

type deleteAddressPayload {
  clientMutationId: String
}

input deleteSCCInput {
  commodity_id: String!
  clientMutationId: String
}

type deleteSCCPayload {
  clientMutationId: String
}

type Mutation {
  createToken(input: createTokenInput!): createTokenPayload
  createUser(input: createUserInput!): createUserPayload
  updateUser(input: updateUserInput!): updateUserPayload
  updateAddress(input: updateAddressInput!): updateAddressPayload
  addAddress(input: addAddressInput!): addAddressPayload
  deleteAddress(input: deleteAddressInput!): deleteAddressPayload
  addPurchaseOrder(input: addPurchaseOrderInput!): addPurchaseOrderPayload
  updatePurchaseOrderPay(input: updatePurchaseOrderPayInput!): updatePurchaseOrderPayPayload
  addNews(input: addNewsInput!): addNewsPayload
  deleteSCC(input: deleteSCCInput!): deleteSCCPayload
  addSCC(input: addSCCInput!): addSCCPayload
}

"""New信息"""
type NewType {
  """The ID of an object"""
  id: ID!
  time: String
  title: String
  url: String
  acount: Int
  laohe: String
}

"""A connection to a list of items."""
type NewTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NewTypeEdge]
}

"""An edge in a connection."""
type NewTypeEdge {
  """The item at the end of the edge"""
  node: NewType

  """A cursor for use in pagination"""
  cursor: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""PurchaseOrder信息"""
type PurchaseOrderType {
  """The ID of an object"""
  id: ID!
  totalPrice: String
  amount: String
  isPay: String
  createdAt: String
  user_id: String
  address_id: String
  province: String
  city: String
  block: String
  detailAddress: String
  name: String
  phoneNumber: String
  zipCode: String
  commoditiyId: String
  commoditiyAmount: String
  commoditiyName: String
  commoditiyPrice: String
  commoditiyImage: String
}

"""A connection to a list of items."""
type PurchaseOrderTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PurchaseOrderTypeEdge]
}

"""An edge in a connection."""
type PurchaseOrderTypeEdge {
  """The item at the end of the edge"""
  node: PurchaseOrderType

  """A cursor for use in pagination"""
  cursor: String!
}

type Query {
  viewer: Viewer
}

"""ShoppingCar信息"""
type ShoppingCarType {
  """The ID of an object"""
  id: ID!
  commodityId: String
  name: String
  price: String
  image: String
  amount: String
}

"""A connection to a list of items."""
type ShoppingCarTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ShoppingCarTypeEdge]
}

"""An edge in a connection."""
type ShoppingCarTypeEdge {
  """The item at the end of the edge"""
  node: ShoppingCarType

  """A cursor for use in pagination"""
  cursor: String!
}

input updateAddressInput {
  address_id: String!
  province: String!
  city: String!
  block: String!
  detailAddress: String!
  name: String!
  phoneNumber: String!
  zipCode: String!
  isDefault: String!
  clientMutationId: String
}

type updateAddressPayload {
  address: AddressType
  clientMutationId: String
}

input updatePurchaseOrderPayInput {
  purchaseOrderId: String!
  isPay: String!
  amount: String!
  commodityId: String!
  clientMutationId: String
}

type updatePurchaseOrderPayPayload {
  purchaseOrder: PurchaseOrderType
  clientMutationId: String
}

input updateUserInput {
  user_id: String!
  nickName: String!
  password: String!
  phoneNumber: String!
  sex: String!
  birthday: String!
  clientMutationId: String
}

type updateUserPayload {
  user: UserType
  clientMutationId: String
}

"""User信息"""
type UserType {
  """The ID of an object"""
  id: ID!
  name: String
  password: String
  sex: String
  nickName: String
  phoneNumber: String
  authority: String
  birthday: String
  accountImage: String
}

"""A connection to a list of items."""
type UserTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserTypeEdge]
}

"""An edge in a connection."""
type UserTypeEdge {
  """The item at the end of the edge"""
  node: UserType

  """A cursor for use in pagination"""
  cursor: String!
}

"""根节点"""
type Viewer {
  """The ID of an object"""
  id: ID!
  users(after: String, first: Int, before: String, last: Int): UserTypeConnection
  user(id: String): UserType
  addresses(user_id: String, after: String, first: Int, before: String, last: Int): AddressTypeConnection
  purchaseOrders(user_id: String, purchaseOrder_id: String, after: String, first: Int, before: String, last: Int): PurchaseOrderTypeConnection
  commodities(category: String, search: String, from: Int, after: String, first: Int, before: String, last: Int): CommodityTypeConnection
  commodity(id: String): CommodityType
  shoppingCar(after: String, first: Int, before: String, last: Int): ShoppingCarTypeConnection
  news(from: Int, after: String, first: Int, before: String, last: Int): NewTypeConnection
}
